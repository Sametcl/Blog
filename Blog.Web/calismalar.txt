1.GUN
1 - Entity katmaninda entities olusturulup bu entity de core katmaninda olusturdugumuz entitybase  entitybase'den ortak kisimlar inherit edildi 
2 - Data katmaninda dbcontext olusturup tablo isimlerini verildi 
3 - Web katmaninda appsettings altinda sqlkey ve program.cs de service olarak dbcontext eklendi 
4 - Data katmaninda migration islemi gerceklestirildi 
5 - Kullanilan paketler
	(
	.Microsoft.EntityFrameworkCore  --> Data 
	.Microsoft.EntityFrameworkCore.SqlServer  --> Data
	.Microsoft.EntityFrameworkCore.Design --> Web
	.Microsoft.EntityFrameworkCore.Tools--> Data
	)
6 - Referanslar 
	(Data-Entity) (Entity-Core) (Web-Data)


2.GUN
1-Data katmaninda context classi altinda overide configuration metodu olusturup assembly ile tum katman altindaki configuration metotlarini tanittik.Detaylari context classi icinde yaziyor
2-Mapping adinda seed data verilerimizi eklemk icin bir folder olusturup bunu icine entitylerimiz adiyla birer map islemi classi acildi.  
3-Data katmaninda Interface repo ve somut repo yazildi 
4-Data katmaninda extensions yazildi 

3.GUN
1-Data katmaninda UnitOfWork yapisi kullanildi sebebi tek yerden generic repository yonetimini saglamak.
2-Service katmaninda interface ve somut olarak serviceler eklendi ve service extensions yazildi.
3-Web katmaninda area olusturuldu ve ardindan mvc yapsii kurudu ve program.cs de route ayarlari yapildi.


4.GUN 
1-Admin Paneli icin Area ve Template kisimlari yapildi 
2-Entity katmaninda dto modelleri olusturul
3-Service Katmaninda AutoMapper kutuphanesi entegre edildi 

5.GUN
1-Entity katmanina gerekli tablolar olusturuldu 
2-Data Katmaninda context yapimiz identity e gore cofigration yapildi
3-Data Katmaninda seed data icin mapping islemlerimizi yapiyoruz ve verileri ekliyoruz 


6.GUN
1-Web Katmaninda program.cs e Identity tanitip session ve ConfigureApplicationCookie ayarlamalari yapilidi 
2-Entity katmaninda user ile diger tablolar arasidnaki iliski proplari yazildi
3-Data katmaninda mappleme islemleri yapildi 
